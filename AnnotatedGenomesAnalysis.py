import os
from glob import glob
import re
from functions import *
geneToSearch = "ATGAACACCGTGACTATTACCGATTTAGCGCGTGAAAACGTCCGCAACCTGACGCCGTATCAGTCAGCGCGTCGTCTGGGCGGTAACGGCGATGTCTGGCTGAACGCCAACGAATATCCCACTGCCGTGGAGTTTCAGCTCACTCAGCAAACGCTCAACCGCTACCCGGAATGCCAACCGAAAGCGGTGATTGAAAATTACGCGCAATATGCAGGCGTAAAACCGGAACAGGTGCTGGTCAGCCGTGGCGCGGACGAAGGCATTGAACTGCTGATTCGCGCTTTTTGCGAACCGGGTAAAGACGCCATCCTCTACTGCCCGCCAACGTACGGCATGTACAGCGTCAGCGCTGAAACCATTGGCGTCGAGTGCCGCACAGTGCCGACGCTGGACAACTGGCAACTGGACTTACAGGGCATTTCCGACAAGCTGGATGGCGTAAAAGTGGTCTATGTTTGCAGCCCCAACAACCCCACCGGGCAACTGATCAACCCGCAGGATTTTCGCACCCTGCTGGAGTTAACCCGCGGTAAGGCGATTGTGGTTGCCGATGAAGCTTATATCGAGTTTTGCCCGCAGGCATCGCTGGCTGGCTGGCTGGCGGAATATCCGCACCTGGCTATTTTGCGCACACTGTCGAAAGCTTTTGCTCTGGCGGGGCTTCGTTGCGGATTTACGCTGGCAAACGAAGAAGTCATCAACCTGCTGATGAAAGTGATCGCCCCCTACCCGCTCTCGACGCCGGTTGCCGACATTGCCGCACAGGCGTTAAGCCCGCAGGGAATCGTCGCCATGCGCGAACGGGTGGCGCAAATTATTGCAGAACGCGAATACCTGATTGCCGCACTGCAAGAGATCCCCTGCGTGGAGCAGGTTTTCGACTCTGAAACCAACTACATTCTGGCGCGCTTTAAAGCCTCCAGCGCAGTGTTTAAATCTTTGTGGGATCAGGGCATTATCTTACGTGATCAGAATAAACAACCCTCTTTAAGCGGCTGCCTGCGAATTACCGTCGGAACCCGTGAAGAAAGCCAGCGCGTCATTGACGCCTTACGTGCGGAGCAAGTTTGA"
geneSeq1 = "ATGAACACCGTGACTATTACCGATTTAGCGCGTGAAAACGTCCGCAACCTGACGCCGTATCAGTCAGCGCGTCGTCTGGGCGGTAACGGCGATGTCTGGCTGAACGCCAACGAATATCCCACTGCCGTGGAGTTTCAGCTCACTCAGCAAACGCTCAACCGCTACCCGGAATGCCAACCGAAAGCGGTGATTGAAAATTACGCGCAATATGCAGGCGTAAAACCGGAACAGGTGCTGGTCAGCCGTGGCGCGGACGAAGGCATTGAACTGCTGATTCGCGCTTTTTGCGAACCGGGTAAAGACGCCATCCTCTACTGCCCGCCAACGTACGGCATGTACAGCGTCAGCGCTGAAACCATTGGCGTCGAGTGCCGCACAGTGCCGACGCTGGACAACTGGCAACTGGACTTACAGGGCATTTCCGACAAGCTGGATGGCGTAAAAGTGGTCTATGTTTGCAGCCCCAACAACCCCACCGGGCAACTGATCAACCCGCAGGATTTTCGCACCCTGCTGGAGTTAACCCGCGGTAAGGCGATTGTGGTTGCCGATGAAGCTTATATCGAGTTTTGCCCGCAGGCATCGCTGGCTGGCTGGCTGGCGGAATATCCGCACCTGGCTATTTTGCGCACACTGTCGAAAGCTTTTGCTCTGGCGGGGCTTCGTTGCGGATTTACGCTGGCAAACGAAGAAGTCATCAACCTGCTGATGAAAGTGATCGCCCCCTACCCGCTCTCGACGCCGGTTGCCGACATTGCCGCACAGGCGTTAAGCCCGCAGGGAATCGTCGCCATGCGCGAACGGGTGGCGCAAATTATTGCAGAACGCGAATACCTGATTGCCGCACTGCAAGAGATCCCCTGCGTGGAGCAGGTTTTCGACTCTGAAACCAACTACATTCTGGCGCGCTTTAAAGCCTCCAGCGCAGTGTTTAAATCTTTGTGGGATCAGGGCATTATCTTACGTGATCAGAATAAACAACCCTCTTTAAGCGGCTGCCTGCGAATTACCGTCGGAACCCGTGAAGAAAGCCAGCGCGTCATTGACGCCTTACGTGCGGAGCAAGTTTGA"
geneSeq2 = "ATGAGCACCGTGACTATTACCGATTTAGCGCGTGAAAACGTCCGCAACCTGACGCCGTATCAGTCAGCGCGTCGTCTGGGCGGTAACGGCGATGTCTGGCTGAACGCCAACGAATACCCCACTGCCGTGGAGTTTCAGCTTACTCAGCAAACGCTCAACCGCTACCCGGAATGCCAGCCGAAAGCGGTGATTGAAAATTACGCGCAATATGCAGGCGTAAAACCGGAGCAGGTGCTGGTCAGCCGTGGCGCGGACGAAGGTATTGAACTGCTGATTCGCGCTTTTTGCGAACCGGGTAAAGACGCCATCCTCTACTGCCCGCCAACGTACGGCATGTACAGCGTCAGCGCCGAAACGATTGGCGTCGAGTGCCGCACAGTGCCGACGCTGGACAACTGGCAACTGGACTTACAGGGCATTTCCGACAAGCTGGACGGCGTAAAAGTGGTCTATGTTTGCAGCCCCAACAACCCGACCGGGCAACTGATCAACCCGCAGGATTTTCGCACCCTGCTGGAGTTAACGCGCGGTAAGGCGATTGTGGTTGCCGATGAAGCCTATATAGAGTTTTGTCCACAGGCATCGCTGGCTGGCTGGCTGGCGGAATATCCGCACCTGGCTATTTTGCGCACACTGTCGAAAGCTTTTGCTCTGGCGGGGCTTCGTTGCGGATTTACGCTGGCAAACGAAGAGGTCATCAACCTGTTAATGAAAGTGATCGCTCCCTACCCGCTCTCGACGCCGGTTGCCGACATTGCGGCCCAGGCGTTAAGCCCGCAGGGGATCGTCGCCATGCGTGAGCGGGTGGCGCAAATTATTGCAGAACGCGAATATCTGATTGCCGCATTGAAAGAGATCCCCTGCGTGGAGCAGGTTTTTGACTCTGAAACCAACTACATTCTGGCGCGCTTTAAAGCCTCCAGTGCAGTGTTTAAATCTTTGTGGGATCAGGGCATTATCTTACGTGATCAGAATAAACAACTCTCTTTAAGCGGCTGCCTGCGAATTACCGTCGGAACCCGTGAAGAAAGCCAGCGCGTCATTGACGCCTTACGTGCGGAGCAAGTTTGA"
geneSeq3 = "ATGAGCACCGTGACTATTACCGATTTAGCGCGTGAAAACGTCCGCAACCTGACGCCGTATCAGTCGGCGCGTCGTCTGGGCGGTAACGGCGACGTCTGGCTGAACGCCAACGAATACCCCACAGCCGTGGAGTTTCAGCTTACTCAGCAAACGCTCAACCGCTACCCGGAATGTCAGCCGAAAGCGGTGATTGAAAATTACGCGCAGTATGCAAGCGTAAAACCGGAGCAGGTGCTGGTCAGCCGTGGCGCGGACGAAGGTATTGAACTACTGATTCGCGCTTTTTGCGAACCAGGTAAAGACGCCATCCTCTACTGCCCGCCAACGTACGGCATGTACAGCGTCAGCGCTGAAACCATTGGCGTCGAGTGCCGCACAGTGCCGACGCTGGACAACTGGCAACTGGACTTGCAGGGCATTTCCGACAAGCTGGACGGCGTAAAAGTGGTCTATGTTTGCAGCCCCAACAACCCGACCGGGCAACTGATCAATCCGCAGGATTTTCGCACTCTGCTGGAGCTAACCCGCGGAAAAGCCATTGTGGTTGCCGATGAAGCCTATATTGAGTTTTGCCCGCAGGCATCGCTGGCTGGCTGGCTGGCGGAATATCCGCACCTGGCTATTTTGCGCACACTGTCGAAAGCTTTTGCTCTGGCGGGCCTTCGTTGCGGATTTACGCTGGCAAACGAAGAAGTCATCAACCTGCTGATGAAAGTGATCGCCCCCTACCCGCTCTCGACGCCGGTCGCCGACATTGCGGCCCAGGCGTTAAGCCCGCAGGGGATCGTCGCCATGCGCGAACGGGTAGCGCAAATTATTGCAGAACGCGAATATCTGATTGCCGCATTGAAAGAAATCCCCTGTGTGGAGCAGGTTTTTGACTCTGAAACCAACTACATTCTGGCGCGCTTTAAAGCCTCCAGTGCAGTGTTTAAATCTTTGTGGGATCAGGGCATTATCTTACGTGATCAGAATAAACAACCCTCTTTAAGCGGCTGCCTGCGAATTACCGTCGGAACCCGTGAAGAAAGCCAGCGCGTCATTGACGCCTTACGTGCGGAGCAAGTTTAA"
PTSfruc = "ATGAAAACGCTGCTGATTATTGACGCTAATCTCGGTCAGGCACGCGCCTATATGGCGAAGACCCTGCTGGGCGCGGCGGCGCGAAAAGCAAAACTGGAAATCATCGACAATCCGAACGACGCTGAAATGGCGATTGTTCTCGGTGATTCCATCCCGAACGACAGCGCGCTGAACGGTAAAAATGTCTGGCTGGGCGATATTTCCCGGGCAGTTGCGCACCCTGAGCTGTTCCTGAGTGAAGCCAAAGGCCATGCTAAACCTTACACTGCGCCGGTCGCTGCGACAGCACCGGTTGACGCCAGCGGCCCGAAACGCGTAGTTGCGGTGACTGCTTGCCCGACTGGCGTAGCACACACCTTTATGGCTGCTGAAGCCATTGAAACCGAAGCGAAAAAACGTGGCTGGTGGGTGAAAGTTGAAACCCGTGGTTCTGTTGGCGCGGGTAATGCAATCACTCCCGAAGAAGTCGCAGCAGCGGATCTGGTGATTGTGGCGGCAGATATCGAAGTGGATCTGGCGAAATTTGCTGGTAAACCGATGTATCGCACCTCTACCGGTCTGGCGCTGAAGAAAACCGCGCAGGAACTGGATAAAGCGGTTGCTGAAGCAACGCCGTATGAACCGGCGGGCAAAGCTCAAACGGCGACCACTGAAGGTAAGAAAGAGAGTGCGGGCGCTTACCGTCACTTGCTGACGGGCGTTTCTTACATGCTGCCGATGGTCGTTGCTGGTGGTCTGTGTATCGCGCTTTCTTTTGCTTTTGGTATCGAAGCGTTTAAAGAGCCGGGTACGTTGGCAGCGGCGCTGATGCAGATTGGCGGTGGTTCAGCCTTTGCGCTGATGGTGCCGGTACTGGCAGGTTATATTGCCTTCTCCATTGCCGATCGTCCGGGCCTCACGCCGGGTCTGATTGGCGGTATGCTGGCTGTCAGCACCGGTTCTGGCTTCATTGGCGGTATTATTGCGGGCTTCCTGGCTGGTTACATTGCGAAGTTAATCAGTACGCAACTGAAACTGCCACAGAGTATGGAGGCGCTGAAACCAATCCTGATCATTCCGCTAATTTCCAGTCTGGTGGTCGGTCTGGCGATGATCTACCTGATCGGTAAACCAGTTGCTGGCATTCTCGAAGGGTTGACTCACTGGCTGCAAACCATGGGGACTGCGAATGCGGTTCTGCTGGGGGCGATCCTCGGTGGCATGATGTGTACTGACATGGGCGGTCCGGTAAACAAAGCAGCGTACGCATTCGGTGTGGGTCTGCTGAGTACTCAAACCTATGGCCCGATGGCGGCGATTATGGCGGCAGGTATGGTGCCACCGCTGGCAATGGGTCTGGCAACAATGGTGGCGCGTCGCAAATTCGACAAAGCGCAGCAGGAAGGTGGCAAAGCCGCTCTGGTATTGGGACTGTGCTTCATTTCGGAAGGTGCAATTCCGTTTGCTGCTCGTGATCCGATGCGTGTGCTGCCGTGCTGTATCGTGGGTGGGGCGCTGACTGGCGCAATCTCAATGGCGATTGGTGCGAAACTGATGGCACCGCACGGTGGTCTGTTTGTTCTGCTGATCCCTGGCGCTATTACGCCGGTACTGGGTTACCTGGTAGCAATTATTGCCGGTACGCTGGTGGCGGGTTTGGCCTATGCCTTCCTGAAACGTCCGGAAGTGGACGCAGTAGCGAAAGCAGCGTAA"

fileFolderPath = "./ourMastitisAnnotatedGenomes"
GenomesFromNucleotidePath = "./DownloadingFilesFromNCBI/DownloadedFromSSB"
significantMutationsFileName = "predictiveGeneVariantsAcrossPhylogroups.csv"
outFileName = "SNPNonSNPratios.tsv" # "my cbtA seqs.fasta"
sigSNPs = [] # list of list [name,SNP location, newNuc, oldNuc]
SNPcounts = [] # snp number = index
unSNPcounts = [] # for checking if I'm reading the right nucleotide
timesGeneFound = []
numMasterFiles = 0
numFiles = 0

# get snps
with open(significantMutationsFileName) as sigMutations:
    for line in sigMutations:
        cols = line.split(",")
        geneName = cols[3]
        geneSNPLocation = cols[4]
        geneProduct = cols[5].lower()
        if geneSNPLocation != "" and line[:2] != "##": # if it is a SNP and not a header line
            geneSNPNuc = re.sub(r"-core", "", cols[0])[-1]
            oldNuc = re.sub(r"-core", "", cols[0])[-3]
            # print(oldNuc)
            sigSNPs.append([geneName, int(geneSNPLocation) - 1,geneSNPNuc, oldNuc, geneProduct])

for i in range(len(sigSNPs)): # start with zeros for snp counts
    SNPcounts.append(0)
    unSNPcounts.append(0)
    timesGeneFound.append(0)

numHisC = 0
# read all files and write snp info to out file
with open(outFileName,"w") as outFile:
    # currently there are problems with the sequence data not being contained in the .gb files and gene locations with > or <
    # some files have sequence data and others have similar files with .1 af ter them with the data and no annotations, e.g. MOAH01000001.1
    filesToIterateOver = glob(os.path.join(GenomesFromNucleotidePath, '*.gb')) + glob(os.path.join(fileFolderPath, '*.gbk'))
    for fileName in filesToIterateOver:
        with open(fileName) as annotationFile:
            for line in annotationFile:
                cols = line.split()
                if len(cols) >= 1 and cols[0] == "WGS":
                    numMasterFiles += 1
        numFiles += 1
        if numFiles % 100 == 0:
            print("on file", numFiles, "of", len(filesToIterateOver))
        contigs = GetContigs(fileName)
        genes = GetGenesOnContigs(fileName, contigs)
        # this is for writing out gene sequences
        # for geneName in genes:
        #     if "cbtA" in geneName:  # account for duplications
        #         outFile.write(">" + fileName + "\n")
        #         outFile.write(genes[geneName][1] + "\n")

        # looking at SNPs
        for SNPindex in range(len(sigSNPs)):
            SNPinfo = sigSNPs[SNPindex]
            geneNameForSNP = SNPinfo[0]
            geneProductForSNP = SNPinfo[4]
            SNPlocation = SNPinfo[1]
            SNPnuc = SNPinfo[2] # the nucleotide that is present after the nucleotide mutates
            unSNPnuc = SNPinfo[3]
            geneSeq = ""
            try:
                geneSeq = genes[geneNameForSNP][1]
            except KeyError:
                try:
                    geneSeq = genes[geneProductForSNP][1]
                    if geneProductForSNP == "hypothetical protein": # don't read hypothetical proteins
                        geneSeq = ""
                except KeyError:
                    0
            if geneSeq != "":
                try:
                    geneNucAtSnp = geneSeq[SNPlocation]
                    if geneNucAtSnp == SNPnuc:
                        SNPcounts[SNPindex] += 1
                    if geneNucAtSnp == unSNPnuc:
                        unSNPcounts[SNPindex] += 1
                    timesGeneFound[SNPindex] += 1
                except IndexError:
                    print("short sequence")




    # header line
    outFile.write("gene name" + "\t"+ "old nuc" + "\t"+ "new nuc" + "\t"+ "SNP percent" + "\t"+ "original nuc percent" + "\t"+ "frequeny of the gene\n")
    for snpIndex in range(len(sigSNPs)):
        # gene name, old nuc, new nuc, SNP percent, original nuc percent, frequeny of the gene
        try:
            outFile.write(sigSNPs[snpIndex][0] + "\t" + sigSNPs[snpIndex][3] + "\t" + sigSNPs[snpIndex][2] + "\t" +
                          str(SNPcounts[snpIndex]/timesGeneFound[snpIndex]) + "\t" +
                          str(unSNPcounts[snpIndex]/timesGeneFound[snpIndex]) + "\t"
                          + str(timesGeneFound[snpIndex]) + "\n")
        except ZeroDivisionError:
            outFile.write(sigSNPs[snpIndex][0] + "\t" + sigSNPs[snpIndex][3] + "\t" + sigSNPs[snpIndex][2] + "\n")

print("numMasterFiles:", numMasterFiles)